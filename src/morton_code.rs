/*
@Misc{libmorton18,
author = "Jeroen Baert",
title = "Libmorton: C++ Morton Encoding/Decoding Library",
howpublished = "\url{https://github.com/Forceflow/libmorton}",
year = "2018"}
*/

use std::num::TryFromIntError;

use bevy_math::UVec3;

/// Morton code is a way of encoding 2D coordinates into a single number.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct MortonCode(u64);

impl PartialOrd for MortonCode {
    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
        Some(self.cmp(other))
    }
}

impl Ord for MortonCode {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        self.0.cmp(&other.0)
    }
}

const MORTON_256_X: [u64; 256] = [
    0x0000_0000,
    0x0000_0001,
    0x0000_0008,
    0x0000_0009,
    0x0000_0040,
    0x0000_0041,
    0x0000_0048,
    0x0000_0049,
    0x0000_0200,
    0x0000_0201,
    0x0000_0208,
    0x0000_0209,
    0x0000_0240,
    0x0000_0241,
    0x0000_0248,
    0x0000_0249,
    0x0000_1000,
    0x0000_1001,
    0x0000_1008,
    0x0000_1009,
    0x0000_1040,
    0x0000_1041,
    0x0000_1048,
    0x0000_1049,
    0x0000_1200,
    0x0000_1201,
    0x0000_1208,
    0x0000_1209,
    0x0000_1240,
    0x0000_1241,
    0x0000_1248,
    0x0000_1249,
    0x0000_8000,
    0x0000_8001,
    0x0000_8008,
    0x0000_8009,
    0x0000_8040,
    0x0000_8041,
    0x0000_8048,
    0x0000_8049,
    0x0000_8200,
    0x0000_8201,
    0x0000_8208,
    0x0000_8209,
    0x0000_8240,
    0x0000_8241,
    0x0000_8248,
    0x0000_8249,
    0x0000_9000,
    0x0000_9001,
    0x0000_9008,
    0x0000_9009,
    0x0000_9040,
    0x0000_9041,
    0x0000_9048,
    0x0000_9049,
    0x0000_9200,
    0x0000_9201,
    0x0000_9208,
    0x0000_9209,
    0x0000_9240,
    0x0000_9241,
    0x0000_9248,
    0x0000_9249,
    0x0004_0000,
    0x0004_0001,
    0x0004_0008,
    0x0004_0009,
    0x0004_0040,
    0x0004_0041,
    0x0004_0048,
    0x0004_0049,
    0x0004_0200,
    0x0004_0201,
    0x0004_0208,
    0x0004_0209,
    0x0004_0240,
    0x0004_0241,
    0x0004_0248,
    0x0004_0249,
    0x0004_1000,
    0x0004_1001,
    0x0004_1008,
    0x0004_1009,
    0x0004_1040,
    0x0004_1041,
    0x0004_1048,
    0x0004_1049,
    0x0004_1200,
    0x0004_1201,
    0x0004_1208,
    0x0004_1209,
    0x0004_1240,
    0x0004_1241,
    0x0004_1248,
    0x0004_1249,
    0x0004_8000,
    0x0004_8001,
    0x0004_8008,
    0x0004_8009,
    0x0004_8040,
    0x0004_8041,
    0x0004_8048,
    0x0004_8049,
    0x0004_8200,
    0x0004_8201,
    0x0004_8208,
    0x0004_8209,
    0x0004_8240,
    0x0004_8241,
    0x0004_8248,
    0x0004_8249,
    0x0004_9000,
    0x0004_9001,
    0x0004_9008,
    0x0004_9009,
    0x0004_9040,
    0x0004_9041,
    0x0004_9048,
    0x0004_9049,
    0x0004_9200,
    0x0004_9201,
    0x0004_9208,
    0x0004_9209,
    0x0004_9240,
    0x0004_9241,
    0x0004_9248,
    0x0004_9249,
    0x0020_0000,
    0x0020_0001,
    0x0020_0008,
    0x0020_0009,
    0x0020_0040,
    0x0020_0041,
    0x0020_0048,
    0x0020_0049,
    0x0020_0200,
    0x0020_0201,
    0x0020_0208,
    0x0020_0209,
    0x0020_0240,
    0x0020_0241,
    0x0020_0248,
    0x0020_0249,
    0x0020_1000,
    0x0020_1001,
    0x0020_1008,
    0x0020_1009,
    0x0020_1040,
    0x0020_1041,
    0x0020_1048,
    0x0020_1049,
    0x0020_1200,
    0x0020_1201,
    0x0020_1208,
    0x0020_1209,
    0x0020_1240,
    0x0020_1241,
    0x0020_1248,
    0x0020_1249,
    0x0020_8000,
    0x0020_8001,
    0x0020_8008,
    0x0020_8009,
    0x0020_8040,
    0x0020_8041,
    0x0020_8048,
    0x0020_8049,
    0x0020_8200,
    0x0020_8201,
    0x0020_8208,
    0x0020_8209,
    0x0020_8240,
    0x0020_8241,
    0x0020_8248,
    0x0020_8249,
    0x0020_9000,
    0x0020_9001,
    0x0020_9008,
    0x0020_9009,
    0x0020_9040,
    0x0020_9041,
    0x0020_9048,
    0x0020_9049,
    0x0020_9200,
    0x0020_9201,
    0x0020_9208,
    0x0020_9209,
    0x0020_9240,
    0x0020_9241,
    0x0020_9248,
    0x0020_9249,
    0x0024_0000,
    0x0024_0001,
    0x0024_0008,
    0x0024_0009,
    0x0024_0040,
    0x0024_0041,
    0x0024_0048,
    0x0024_0049,
    0x0024_0200,
    0x0024_0201,
    0x0024_0208,
    0x0024_0209,
    0x0024_0240,
    0x0024_0241,
    0x0024_0248,
    0x0024_0249,
    0x0024_1000,
    0x0024_1001,
    0x0024_1008,
    0x0024_1009,
    0x0024_1040,
    0x0024_1041,
    0x0024_1048,
    0x0024_1049,
    0x0024_1200,
    0x0024_1201,
    0x0024_1208,
    0x0024_1209,
    0x0024_1240,
    0x0024_1241,
    0x0024_1248,
    0x0024_1249,
    0x0024_8000,
    0x0024_8001,
    0x0024_8008,
    0x0024_8009,
    0x0024_8040,
    0x0024_8041,
    0x0024_8048,
    0x0024_8049,
    0x0024_8200,
    0x0024_8201,
    0x0024_8208,
    0x0024_8209,
    0x0024_8240,
    0x0024_8241,
    0x0024_8248,
    0x0024_8249,
    0x0024_9000,
    0x0024_9001,
    0x0024_9008,
    0x0024_9009,
    0x0024_9040,
    0x0024_9041,
    0x0024_9048,
    0x0024_9049,
    0x0024_9200,
    0x0024_9201,
    0x0024_9208,
    0x0024_9209,
    0x0024_9240,
    0x0024_9241,
    0x0024_9248,
    0x0024_9249,
];

/// pre-shifted table for Y coordinates (1 bit to the left)
const MORTON_256_Y: [u64; 256] = [
    0x0000_0000,
    0x0000_0002,
    0x0000_0010,
    0x0000_0012,
    0x0000_0080,
    0x0000_0082,
    0x0000_0090,
    0x0000_0092,
    0x0000_0400,
    0x0000_0402,
    0x0000_0410,
    0x0000_0412,
    0x0000_0480,
    0x0000_0482,
    0x0000_0490,
    0x0000_0492,
    0x0000_2000,
    0x0000_2002,
    0x0000_2010,
    0x0000_2012,
    0x0000_2080,
    0x0000_2082,
    0x0000_2090,
    0x0000_2092,
    0x0000_2400,
    0x0000_2402,
    0x0000_2410,
    0x0000_2412,
    0x0000_2480,
    0x0000_2482,
    0x0000_2490,
    0x0000_2492,
    0x0001_0000,
    0x0001_0002,
    0x0001_0010,
    0x0001_0012,
    0x0001_0080,
    0x0001_0082,
    0x0001_0090,
    0x0001_0092,
    0x0001_0400,
    0x0001_0402,
    0x0001_0410,
    0x0001_0412,
    0x0001_0480,
    0x0001_0482,
    0x0001_0490,
    0x0001_0492,
    0x0001_2000,
    0x0001_2002,
    0x0001_2010,
    0x0001_2012,
    0x0001_2080,
    0x0001_2082,
    0x0001_2090,
    0x0001_2092,
    0x0001_2400,
    0x0001_2402,
    0x0001_2410,
    0x0001_2412,
    0x0001_2480,
    0x0001_2482,
    0x0001_2490,
    0x0001_2492,
    0x0008_0000,
    0x0008_0002,
    0x0008_0010,
    0x0008_0012,
    0x0008_0080,
    0x0008_0082,
    0x0008_0090,
    0x0008_0092,
    0x0008_0400,
    0x0008_0402,
    0x0008_0410,
    0x0008_0412,
    0x0008_0480,
    0x0008_0482,
    0x0008_0490,
    0x0008_0492,
    0x0008_2000,
    0x0008_2002,
    0x0008_2010,
    0x0008_2012,
    0x0008_2080,
    0x0008_2082,
    0x0008_2090,
    0x0008_2092,
    0x0008_2400,
    0x0008_2402,
    0x0008_2410,
    0x0008_2412,
    0x0008_2480,
    0x0008_2482,
    0x0008_2490,
    0x0008_2492,
    0x0009_0000,
    0x0009_0002,
    0x0009_0010,
    0x0009_0012,
    0x0009_0080,
    0x0009_0082,
    0x0009_0090,
    0x0009_0092,
    0x0009_0400,
    0x0009_0402,
    0x0009_0410,
    0x0009_0412,
    0x0009_0480,
    0x0009_0482,
    0x0009_0490,
    0x0009_0492,
    0x0009_2000,
    0x0009_2002,
    0x0009_2010,
    0x0009_2012,
    0x0009_2080,
    0x0009_2082,
    0x0009_2090,
    0x0009_2092,
    0x0009_2400,
    0x0009_2402,
    0x0009_2410,
    0x0009_2412,
    0x0009_2480,
    0x0009_2482,
    0x0009_2490,
    0x0009_2492,
    0x0040_0000,
    0x0040_0002,
    0x0040_0010,
    0x0040_0012,
    0x0040_0080,
    0x0040_0082,
    0x0040_0090,
    0x0040_0092,
    0x0040_0400,
    0x0040_0402,
    0x0040_0410,
    0x0040_0412,
    0x0040_0480,
    0x0040_0482,
    0x0040_0490,
    0x0040_0492,
    0x0040_2000,
    0x0040_2002,
    0x0040_2010,
    0x0040_2012,
    0x0040_2080,
    0x0040_2082,
    0x0040_2090,
    0x0040_2092,
    0x0040_2400,
    0x0040_2402,
    0x0040_2410,
    0x0040_2412,
    0x0040_2480,
    0x0040_2482,
    0x0040_2490,
    0x0040_2492,
    0x0041_0000,
    0x0041_0002,
    0x0041_0010,
    0x0041_0012,
    0x0041_0080,
    0x0041_0082,
    0x0041_0090,
    0x0041_0092,
    0x0041_0400,
    0x0041_0402,
    0x0041_0410,
    0x0041_0412,
    0x0041_0480,
    0x0041_0482,
    0x0041_0490,
    0x0041_0492,
    0x0041_2000,
    0x0041_2002,
    0x0041_2010,
    0x0041_2012,
    0x0041_2080,
    0x0041_2082,
    0x0041_2090,
    0x0041_2092,
    0x0041_2400,
    0x0041_2402,
    0x0041_2410,
    0x0041_2412,
    0x0041_2480,
    0x0041_2482,
    0x0041_2490,
    0x0041_2492,
    0x0048_0000,
    0x0048_0002,
    0x0048_0010,
    0x0048_0012,
    0x0048_0080,
    0x0048_0082,
    0x0048_0090,
    0x0048_0092,
    0x0048_0400,
    0x0048_0402,
    0x0048_0410,
    0x0048_0412,
    0x0048_0480,
    0x0048_0482,
    0x0048_0490,
    0x0048_0492,
    0x0048_2000,
    0x0048_2002,
    0x0048_2010,
    0x0048_2012,
    0x0048_2080,
    0x0048_2082,
    0x0048_2090,
    0x0048_2092,
    0x0048_2400,
    0x0048_2402,
    0x0048_2410,
    0x0048_2412,
    0x0048_2480,
    0x0048_2482,
    0x0048_2490,
    0x0048_2492,
    0x0049_0000,
    0x0049_0002,
    0x0049_0010,
    0x0049_0012,
    0x0049_0080,
    0x0049_0082,
    0x0049_0090,
    0x0049_0092,
    0x0049_0400,
    0x0049_0402,
    0x0049_0410,
    0x0049_0412,
    0x0049_0480,
    0x0049_0482,
    0x0049_0490,
    0x0049_0492,
    0x0049_2000,
    0x0049_2002,
    0x0049_2010,
    0x0049_2012,
    0x0049_2080,
    0x0049_2082,
    0x0049_2090,
    0x0049_2092,
    0x0049_2400,
    0x0049_2402,
    0x0049_2410,
    0x0049_2412,
    0x0049_2480,
    0x0049_2482,
    0x0049_2490,
    0x0049_2492,
];

/// Pre-shifted table for z (2 bits to the left)
const MORTON_256_Z: [u64; 256] = [
    0x0000_0000,
    0x0000_0004,
    0x0000_0020,
    0x0000_0024,
    0x0000_0100,
    0x0000_0104,
    0x0000_0120,
    0x0000_0124,
    0x0000_0800,
    0x0000_0804,
    0x0000_0820,
    0x0000_0824,
    0x0000_0900,
    0x0000_0904,
    0x0000_0920,
    0x0000_0924,
    0x0000_4000,
    0x0000_4004,
    0x0000_4020,
    0x0000_4024,
    0x0000_4100,
    0x0000_4104,
    0x0000_4120,
    0x0000_4124,
    0x0000_4800,
    0x0000_4804,
    0x0000_4820,
    0x0000_4824,
    0x0000_4900,
    0x0000_4904,
    0x0000_4920,
    0x0000_4924,
    0x0002_0000,
    0x0002_0004,
    0x0002_0020,
    0x0002_0024,
    0x0002_0100,
    0x0002_0104,
    0x0002_0120,
    0x0002_0124,
    0x0002_0800,
    0x0002_0804,
    0x0002_0820,
    0x0002_0824,
    0x0002_0900,
    0x0002_0904,
    0x0002_0920,
    0x0002_0924,
    0x0002_4000,
    0x0002_4004,
    0x0002_4020,
    0x0002_4024,
    0x0002_4100,
    0x0002_4104,
    0x0002_4120,
    0x0002_4124,
    0x0002_4800,
    0x0002_4804,
    0x0002_4820,
    0x0002_4824,
    0x0002_4900,
    0x0002_4904,
    0x0002_4920,
    0x0002_4924,
    0x0010_0000,
    0x0010_0004,
    0x0010_0020,
    0x0010_0024,
    0x0010_0100,
    0x0010_0104,
    0x0010_0120,
    0x0010_0124,
    0x0010_0800,
    0x0010_0804,
    0x0010_0820,
    0x0010_0824,
    0x0010_0900,
    0x0010_0904,
    0x0010_0920,
    0x0010_0924,
    0x0010_4000,
    0x0010_4004,
    0x0010_4020,
    0x0010_4024,
    0x0010_4100,
    0x0010_4104,
    0x0010_4120,
    0x0010_4124,
    0x0010_4800,
    0x0010_4804,
    0x0010_4820,
    0x0010_4824,
    0x0010_4900,
    0x0010_4904,
    0x0010_4920,
    0x0010_4924,
    0x0012_0000,
    0x0012_0004,
    0x0012_0020,
    0x0012_0024,
    0x0012_0100,
    0x0012_0104,
    0x0012_0120,
    0x0012_0124,
    0x0012_0800,
    0x0012_0804,
    0x0012_0820,
    0x0012_0824,
    0x0012_0900,
    0x0012_0904,
    0x0012_0920,
    0x0012_0924,
    0x0012_4000,
    0x0012_4004,
    0x0012_4020,
    0x0012_4024,
    0x0012_4100,
    0x0012_4104,
    0x0012_4120,
    0x0012_4124,
    0x0012_4800,
    0x0012_4804,
    0x0012_4820,
    0x0012_4824,
    0x0012_4900,
    0x0012_4904,
    0x0012_4920,
    0x0012_4924,
    0x0080_0000,
    0x0080_0004,
    0x0080_0020,
    0x0080_0024,
    0x0080_0100,
    0x0080_0104,
    0x0080_0120,
    0x0080_0124,
    0x0080_0800,
    0x0080_0804,
    0x0080_0820,
    0x0080_0824,
    0x0080_0900,
    0x0080_0904,
    0x0080_0920,
    0x0080_0924,
    0x0080_4000,
    0x0080_4004,
    0x0080_4020,
    0x0080_4024,
    0x0080_4100,
    0x0080_4104,
    0x0080_4120,
    0x0080_4124,
    0x0080_4800,
    0x0080_4804,
    0x0080_4820,
    0x0080_4824,
    0x0080_4900,
    0x0080_4904,
    0x0080_4920,
    0x0080_4924,
    0x0082_0000,
    0x0082_0004,
    0x0082_0020,
    0x0082_0024,
    0x0082_0100,
    0x0082_0104,
    0x0082_0120,
    0x0082_0124,
    0x0082_0800,
    0x0082_0804,
    0x0082_0820,
    0x0082_0824,
    0x0082_0900,
    0x0082_0904,
    0x0082_0920,
    0x0082_0924,
    0x0082_4000,
    0x0082_4004,
    0x0082_4020,
    0x0082_4024,
    0x0082_4100,
    0x0082_4104,
    0x0082_4120,
    0x0082_4124,
    0x0082_4800,
    0x0082_4804,
    0x0082_4820,
    0x0082_4824,
    0x0082_4900,
    0x0082_4904,
    0x0082_4920,
    0x0082_4924,
    0x0090_0000,
    0x0090_0004,
    0x0090_0020,
    0x0090_0024,
    0x0090_0100,
    0x0090_0104,
    0x0090_0120,
    0x0090_0124,
    0x0090_0800,
    0x0090_0804,
    0x0090_0820,
    0x0090_0824,
    0x0090_0900,
    0x0090_0904,
    0x0090_0920,
    0x0090_0924,
    0x0090_4000,
    0x0090_4004,
    0x0090_4020,
    0x0090_4024,
    0x0090_4100,
    0x0090_4104,
    0x0090_4120,
    0x0090_4124,
    0x0090_4800,
    0x0090_4804,
    0x0090_4820,
    0x0090_4824,
    0x0090_4900,
    0x0090_4904,
    0x0090_4920,
    0x0090_4924,
    0x0092_0000,
    0x0092_0004,
    0x0092_0020,
    0x0092_0024,
    0x0092_0100,
    0x0092_0104,
    0x0092_0120,
    0x0092_0124,
    0x0092_0800,
    0x0092_0804,
    0x0092_0820,
    0x0092_0824,
    0x0092_0900,
    0x0092_0904,
    0x0092_0920,
    0x0092_0924,
    0x0092_4000,
    0x0092_4004,
    0x0092_4020,
    0x0092_4024,
    0x0092_4100,
    0x0092_4104,
    0x0092_4120,
    0x0092_4124,
    0x0092_4800,
    0x0092_4804,
    0x0092_4820,
    0x0092_4824,
    0x0092_4900,
    0x0092_4904,
    0x0092_4920,
    0x0092_4924,
];

impl MortonCode {
    /// Converts u8 into a morton code wrapper struct
    #[inline]
    pub fn from_u8(x: u8) -> Self {
        Self(u64::from(x))
    }

    /// Creates a new morton code by encoding x, y, z
    #[inline]
    pub fn encode_xyz(x: u32, y: u32, z: u32) -> Self {
        Self::encode(UVec3::new(x, y, z))
    }

    /// Creates a new morton code by encoding `UVec3`
    #[inline]
    pub fn encode(point: UVec3) -> Self {
        let mut answer = MORTON_256_Z[(point.z >> 16) as usize & 0xFF] // we start by shifting the third byte, since we only look at the first 21 bits
            | MORTON_256_Y[(point.y >> 16) as usize & 0xFF]
            | MORTON_256_X[(point.z >> 16) as usize & 0xFF];

        answer = answer << 48 | MORTON_256_Z[(point.z >> 8) as usize & 0xFF] // shifting second byte
            | MORTON_256_Y[(point.y >> 8) as usize & 0xFF]
            | MORTON_256_X[(point.x >> 8) as usize & 0xFF];

        answer = answer << 24 | MORTON_256_Z[(point.z) as usize & 0xFF] // first byte
            | MORTON_256_Y[(point.y) as usize & 0xFF]
            | MORTON_256_X[(point.x) as usize & 0xFF];

        Self(answer)
    }

    /// Returns the morton code as a u64
    #[inline]
    pub fn as_u64(self) -> u64 {
        self.0
    }

    /// Returns the morton code as a usize
    #[allow(dead_code)]
    #[inline]
    pub fn as_usize(self) -> Result<usize, TryFromIntError> {
        usize::try_from(self.0)
    }

    /// Returns the morton code as a u8
    #[inline]
    pub fn as_u8(self) -> Result<u8, TryFromIntError> {
        u8::try_from(self.0)
    }

    /// Decodes the morton code into a `UVec3`
    #[inline]
    pub fn decode(self) -> Result<UVec3, TryFromIntError> {
        let mut x = 0;
        let mut y = 0;
        let mut z = 0;

        for i in 0..(std::mem::size_of::<u64>() * 8) / 3 {
            x |= (self.0 & (1 << (3 * i))) >> ((3 * i) - i);
            y |= (self.0 & (1 << ((3 * i) + 1))) >> (((3 * i) + 1) - i);
            z |= (self.0 & (1 << ((3 * i) + 2))) >> (((3 * i) + 2) - i);
        }

        let x = u32::try_from(x)?;
        let y = u32::try_from(y)?;
        let z = u32::try_from(z)?;

        Ok(UVec3::new(x, y, z))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_morton_code() {
        for x in 0..256 {
            for y in 0..256 {
                for z in 0..256 {
                    let morton_code = MortonCode::encode_xyz(x, y, z);
                    let p = morton_code.decode().unwrap();

                    assert_eq!(x, p.x);
                    assert_eq!(y, p.y);
                    assert_eq!(z, p.z);
                }
            }
        }
    }
}
